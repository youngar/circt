name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  # Build the LLVM submodule then cache it. Do not rebuild if hit in the
  # cache.
  build-llvm:
    name: Build LLVM
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/circt/images/circt-ci-build:20210811055218
    steps:
      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          submodules: "true"

      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm)"

      - name: Get workflow spec hash
        id: get-workflow-hash
        run: echo "::set-output name=hash::$(md5sum $GITHUB_WORKSPACE/.github/workflows/buildAndTest.yml)"

      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            llvm/build
            llvm/install
          key: ${{ runner.os }}-llvm-${{ steps.get-llvm-hash.outputs.hash }}-${{ steps.get-workflow-hash.outputs.hash }}

      # Build LLVM if we didn't hit in the cache.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: utils/build-llvm.sh


    # Installing the results into the cache is an action which is automatically
    # added by the cache action above.

  # --- end of build-llvm job.

  # Configure CIRCT using LLVM's build system ("Unified" build). We do not actually build this configuration since it isn't as easy to cache LLVM artifacts in this mode.
  configure-circt-unified:
    name: Configure Unified Build
    runs-on: ubuntu-18.04
    steps:
      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          submodules: "true"

      - name: Configure Unified Build
        run: |
          mkdir configure_unified
          cd configure_unified
          cmake ../llvm/llvm \
            -DCMAKE_CXX_STANDARD=17 \
            -DBUILD_SHARED_LIBS=ON \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_TARGETS_TO_BUILD=host \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_EXTERNAL_PROJECTS=circt \
            -DLLVM_EXTERNAL_CIRCT_SOURCE_DIR=$PWD/.. 

  # --- end of configure-circt-unified job.

  # Build CIRCT and run its tests.
  build-circt:
    name: Build and Test
    needs: build-llvm
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/circt/images/circt-ci-build:20210811055218
    steps:
      - name: Configure Environment
        run: echo "$GITHUB_WORKSPACE/llvm/install/bin" >> $GITHUB_PATH

      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
          submodules: "true"

      # --------
      # Restore LLVM from cache and build if it's not in there.
      # --------

      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm)"

      - name: Get workflow spec hash
        id: get-workflow-hash
        run: echo "::set-output name=hash::$(md5sum $GITHUB_WORKSPACE/.github/workflows/buildAndTest.yml)"

      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            llvm/build
            llvm/install
          key: ${{ runner.os }}-llvm-${{ steps.get-llvm-hash.outputs.hash }}-${{ steps.get-workflow-hash.outputs.hash }}

      # Build LLVM if we didn't hit in the cache. Even though we build it in
      # the previous job, there is a low chance that it'll have been evicted by
      # the time we get here.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: utils/build-llvm.sh

      # --------
      # Build and test CIRCT in both debug and release mode.
      # --------

      # Our PR builds are trying to test the two corners of the build matrix:
      # clang + release + noassert + shared
      # gcc   + debug   + assert   + static 

      # Build the CIRCT test target in release mode with assertions using Clang.
      - name: Build and Test CIRCT (Clang release)
        run: |
          mkdir build_clang
          cd build_clang
          cmake .. \
            -DCMAKE_CXX_STANDARD=17 \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=OFF \
            -DMLIR_DIR=../llvm/install/lib/cmake/mlir/ \
            -DLLVM_DIR=../llvm/install/lib/cmake/llvm/ \
            -DCMAKE_LINKER=lld \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLVM_EXTERNAL_LIT=`pwd`/../llvm/build/bin/llvm-lit \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          make check-circt -j$(nproc)
          make circt-doc

      # Build the CIRCT test target in debug mode with assertions using GCC.
      - name: Build and Test CIRCT (GCC debug)
        run: |
          mkdir build_gcc
          cd build_gcc
          cmake .. \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_BUILD_TYPE=Debug \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DMLIR_DIR=../llvm/install/lib/cmake/mlir/ \
            -DLLVM_DIR=../llvm/install/lib/cmake/llvm/ \
            -DCMAKE_LINKER=lld \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_COMPILER=g++ \
            -DLLVM_EXTERNAL_LIT=`pwd`/../llvm/build/bin/llvm-lit
          make check-circt -j$(nproc)
          make circt-doc

      # --------
      # Lint the CIRCT C++ code.
      # -------

      # Choose the git commit to diff against for the purposes of linting.
      # Since this workflow is triggered on both pushes and pull requests, we
      # have to determine if the pull request target branch is set (which it
      # will only be on the PR triggered flow). If it's not, then compare
      # against the last commit.
      - name: choose-commit
        if: ${{ always() }}
        env:
          # Base ref is the target branch, in text form (not hash)
          PR_BASE: ${{ github.base_ref }}
        run: |
          # Run clang-format
          if [ -z "$PR_BASE" ]; then
            DIFF_COMMIT_NAME="HEAD^"
          else
            DIFF_COMMIT_NAME="$PR_BASE"
          fi
          echo "DIFF_COMMIT_NAME=$DIFF_COMMIT_NAME" >> $GITHUB_ENV

      # Since we did a shallow fetch for this repo, we must fetch the commit
      # upon which we be diff'ing. The last step set the ref name in the
      # $DIFF_COMMIT_NAME environment variable. When running the fetch, resolve
      # it to the commit hash and pass that hash along to subsequent steps.
      - name: git fetch base commit
        continue-on-error: true
        run: |
          if echo "$DIFF_COMMIT_NAME" | grep -q HEAD; then
            DIFF_COMMIT_SHA=$( git rev-parse $DIFF_COMMIT_NAME )
          else
            git fetch --recurse-submodules=no origin $DIFF_COMMIT_NAME
            DIFF_COMMIT_SHA=$( git rev-parse origin/$DIFF_COMMIT_NAME )
          fi
          echo "DIFF_COMMIT=$DIFF_COMMIT_SHA" >> $GITHUB_ENV

      # Run 'git clang-format', comparing against the target commit hash. If
      # clang-format fixed anything, fail and output a patch.
      - name: clang-format
        if: ${{ always() }}
        run: |
          # Run clang-format
          git clang-format $DIFF_COMMIT
          git diff --ignore-submodules > clang-format.patch
          if [ -s clang-format.patch ]; then
            echo "Clang-format found formatting problems in the following " \
              "files. See diff in the clang-format.patch artifact."
            git diff --ignore-submodules --name-only
            git checkout .
            exit 1
          fi
          echo "Clang-format found no formatting problems"
          exit 0

      # Run clang-tidy against only the changes. The 'clang-tidy-diff' script
      # does this if supplied with the diff.
      - name: clang-tidy
        if: ${{ always() }}
        run: |
          git diff -U0 $DIFF_COMMIT | \
            clang-tidy-diff -path build_assert -p1 -fix
          git diff --ignore-submodules > clang-tidy.patch
          if [ -s clang-tidy.patch ]; then
            echo "Clang-tidy problems in the following files. " \
              "See diff in the clang-tidy.patch artifact."
            git diff --ignore-submodules --name-only
            git checkout .
            exit 1
          fi
          echo "Clang-tidy found no problems"
          exit 0

      # Run yapf to check Python formatting.
      - name: python-format
        if: ${{ always() }}
        run: |
          files=$(git diff --name-only $DIFF_COMMIT | grep .py || echo -n)
          if [ ! -z $files ]; then
            yapf --diff $files
          fi

      # Upload the format and tidy patches to an artifact (zip'd) associated
      # with the workflow run. Only run this on a failure.
      - name: Upload format and tidy patches
        uses: actions/upload-artifact@v2
        continue-on-error: true
        if: ${{ failure() }}
        with:
          name: clang-format-tidy-patches
          path: clang-*.patch

      # Unfortunately, artifact uploads are always zips so display the diff as
      # well to provide feedback at a glance.
      - name: clang format and tidy patches display
        if: ${{ failure() }}
        continue-on-error: true
        run: |
          # Display patches
          if [ ! -z clang-format.patch ]; then
            echo "Clang-format patch"
            echo "================"
            cat clang-format.patch
            echo "================"
          fi
          if [ ! -z clang-tidy.patch ]; then
            echo "Clang-tidy patch"
            echo "================"
            cat clang-tidy.patch
            echo "================"
          fi

    # --- end of build-circt job.
